{% extends 'layouts/layout.twig' %}


{% block title %}
    Chat
{% endblock %}


{% block content %}


    <div id="chatApp">
        <h1>Chat</h1>
        <a href="{{ path_for('home') }}">Volver al perfil</a>


        <form @submit.prevent="submitNewEntry" v-if="showIntroWindow" class="show-intro">
            <input type="text" v-model="newUserName" v-focus>
            <span v-if="loading">Conectando...</span>
        </form>


        <div v-else class="chat-container">
            <div class="lista-chats-container">
                <input @keyup.enter="sendMessage" type="text" v-model="newMessage" placeholder="Nuevo mensaje...">
                <ul class="lista-chats">
                    <li v-for="chat in chats">
                        <span>[[ chat.sender ]]</span>
                        [[ chat.message ]]
                    </li>
                </ul>
            </div>
            <div class="lista-users">
                <p>Usuarios en sala de chat ([[ users.length ]])</p>
                <ul class="lista-users">
                    <li v-for="user in users">
                        [[ user ]]
                    </li>
                </ul>
            </div>
        </div>

    </div>



{% endblock %}



{% block scripts %}

    <script>

		 const WEB_SOCKET_URL = 'ws://localhost:5050';


		 let chatApp = new Vue({
			 el: '#chatApp',
			 directives: {
				 focus: {
					 inserted(el) {
						 el.focus()
					 }
				 }
			 },
			 data: {
				 currentUser: null,
				 conn: null,
				 showIntroWindow: true,
				 newUserName: '',
				 users: [],
				 chats: [],
				 loading: false,
				 newMessage: ''
			 },
			 delimiters: ['[[', ']]'],
			 methods: {
				 sendMessage() {
					 this.conn.send(JSON.stringify({
						 sender: this.currentUser.userName,
						 message: this.newMessage
					 }));
					 this.newMessage = '';
				 },
				 onOpen(e) {
					 this.loading = false;
					 this.showIntroWindow = false;
					 const payload = {
						 userName: this.newUserName,
						 isEntering: true
					 };
					 this.currentUser = payload;
					 this.conn.send(JSON.stringify(payload));
				 },
				 onClose(e) {
					 console.log(e);
				 },
				 onMessage(e) {
					 let payload = JSON.parse(e.data);
					 if (payload.isEntering) {
						 this.users.push(payload.userName);
						 this.newUserName = '';
					 } else {
						 this.chats.push(payload);
					 }
				 },
				 onError(e) {
					 console.log(e);
					 this.loading = false;
				 },
				 submitNewEntry() {
					 this.loading = true;
					 if (this.newUserName) {
						 this.conn = new WebSocket(WEB_SOCKET_URL);
						 this.conn.onopen = this.onOpen;
						 this.conn.onclose = this.onClose;
						 this.conn.onmessage = this.onMessage;
						 this.conn.onerror = this.onError;
					 }
				 }
			 }
		 })


    </script>


{% endblock %}